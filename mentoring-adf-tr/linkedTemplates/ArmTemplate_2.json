{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-tr"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get movies file names from blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_blobmovies",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy each file from blob into data lake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get movies file names from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get movies file names from blob').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy movies from blob into data lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@string(item().name)",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "MergeFiles"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_azurementoringdatalaketr",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_blobmovies",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_datalake_rowmovies",
											"type": "DatasetReference",
											"parameters": {
												"sinkfilename": {
													"value": "@concat(replace(string(item().name),'.csv',''), '_', variables('currentdate'), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"currentdate": {
						"type": "String",
						"defaultValue": "@formatDateTime(utcnow(),'yyyyMMddHHmmss')"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-22T00:43:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module2_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy movies from blob into data lake_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(), variables('currentdate') ), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_azurementoringdatalaketr",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_blobmovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_datalake_rowmovies_copy1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"currentdate": {
						"type": "String",
						"defaultValue": "@formatDateTime(utcnow(),'yyyyMMddHHmmss')"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-30T15:01:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy movies from blob into data lake_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(), variables('currentdate') ), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_azurementoringdatalaketr",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_blobModule4",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_datalakeModule4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"currentdate": {
						"type": "String",
						"defaultValue": "@formatDateTime(utcnow(),'yyyyMMddHHmmss')"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-30T21:30:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get movies file names from blob",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lkp_TruncateSTG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_blobmovies",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy each file from blob into data lake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get movies file names from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get movies file names from blob').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy from csv into stg Azure SQL DB_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": {
														"value": "@replace(string(item().name),'.csv','')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": true,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_blobmovies_comma",
											"type": "DatasetReference",
											"parameters": {
												"filename": "@string(item().name)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_moviesAzureSQLDB",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@if(contains(string(item().name), 'rating')\n, 'ratings'\n, replace(string(item().name),'.csv','')\n)",
													"type": "Expression"
												},
												"schemaname": "stg"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lkp_TruncateSTG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "TRUNCATE TABLE stg.credits;\nSELECT COUNT(1) FROM stg.credits; \nTRUNCATE TABLE stg.movies_metadata;\nSELECT COUNT(1) FROM stg.movies_metadata;\nTRUNCATE TABLE stg.ratings;\nSELECT COUNT(1) FROM stg.rating;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lkp Get SPs",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy each file from blob into data lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT trim([value]) AS value FROM \nstring_split ( 'dbo.spPopulateCast, dbo.spPopulateCompany, dbo.spPopulateGenre, dbo.spPopulateMovies, dbo.spPopulateMoviesCastMap, dbo.spPopulateMoviesCompanyMap, dbo.spPopulateMoviesGenreMap, dbo.spPopulateMovieStatus, dbo.spPopulatetRatings', ',')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachLoad fromSTGintoDBO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp Get SPs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp Get SPs').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SPs load from stg into dbo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@string(item().value)",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_MoviesAzureSqlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"source_filename": {
						"type": "String",
						"defaultValue": "credits"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-06T10:32:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module5_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp Get SPs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT trim([value]) AS value FROM \nstring_split ( 'dbo.spPopulateCast, dbo.spPopulateCompany, dbo.spPopulateGenre, dbo.spPopulateMovies, dbo.spPopulateMoviesCastMap, dbo.spPopulateMoviesCompanyMap, dbo.spPopulateMoviesGenreMap, dbo.spPopulateMovieStatus, dbo.spPopulatetRatings', ',')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachLoad fromSTGintoDBO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp Get SPs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp Get SPs').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SPs load from stg into dbo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@string(item().value)",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_MoviesAzureSqlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-02T22:07:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module5_stg_to_dbo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy credits from csv into stg Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": {
											"value": "@string('credits.csv')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.credits;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_blobmovies_comma",
								"type": "DatasetReference",
								"parameters": {
									"filename": "credits.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "credits",
										"type": "Expression"
									},
									"schemaname": "stg"
								}
							}
						]
					},
					{
						"name": "Copy movies from csv into stg Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": {
											"value": "@string('movies_metadata.csv')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.movies_metadata;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_blobmovies_comma",
								"type": "DatasetReference",
								"parameters": {
									"filename": "movies_metadata.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "movies_metadata",
									"schemaname": "stg"
								}
							}
						]
					},
					{
						"name": "Copy ratings from csv into stg Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "ratings_part*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.ratings;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_blobmovies_ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "ratings",
										"type": "Expression"
									},
									"schemaname": "stg"
								}
							}
						]
					},
					{
						"name": "Run General SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy ratings from csv into stg Azure SQL DB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy movies from csv into stg Azure SQL DB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy credits from csv into stg Azure SQL DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatingSPQueue]"
						},
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-09T23:20:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from MS SQL Tikets into Azure SQL movies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Get WaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM dbo.Tickets WHERE [transactionDt] > '@{activity('Lookup Get WaterMarkValue').output.firstRow.OldWmarkValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.cinema_tickets;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MSSQLCinemaTickets_M6",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Tickets",
									"SchemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "cinema_tickets",
									"schemaname": "stg"
								}
							}
						]
					},
					{
						"name": "Lookup Get WaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT MAX(TransactionDate) AS OldWmarkValue \nFROM dbo.tCinemaTickets;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SP Populate Cinema from stg to dbo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from MS SQL Tikets into Azure SQL movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]",
							"storedProcedureParameters": {
								"getdate": {
									"value": {
										"value": "@variables('CurrentDate')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"CurrentDate": {
						"type": "String",
						"defaultValue": "@string(utcnow())"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-13T16:08:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module6_MultTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupOldWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from watermarktable where TableName  =  '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_moviesAzureSQLDB",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "watermarktable",
												"schemaname": "dbo"
											}
										}
									}
								},
								{
									"name": "LookupNewWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select ISNULL(MAX(@{item().WaterMark_Column}), getutcdate()) as NewWatermarkValue from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_moviesAzureSQLDB",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "watermarktable",
												"schemaname": "dbo"
											}
										}
									}
								},
								{
									"name": "IncrementalCopyActivity",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupOldWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "LookupNewWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column} > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and @{item().WaterMark_Column} <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForMergeOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureTableTypeParameterName": {
												"value": "@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_MSSQLCinemaTickets_M6_WOPrmt",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_moviesAzureSQLDB",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "@{item().TABLE_NAME}",
												"schemaname": "dbo"
											}
										}
									]
								},
								{
									"name": "StoredProceduretoWriteWatermarkActivity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "IncrementalCopyActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TableName": {
												"value": {
													"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_MoviesAzureSqlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tableList": {
						"type": "array",
						"defaultValue": [
							{
								"TABLE_NAME": "customer_table",
								"WaterMark_Column": "LastModifytime",
								"TableType": "DataTypeforCustomerTable",
								"StoredProcedureNameForMergeOperation": "usp_upsert_customer_table"
							},
							{
								"TABLE_NAME": "project_table",
								"WaterMark_Column": "Creationtime",
								"TableType": "DataTypeforProjectTable",
								"StoredProcedureNameForMergeOperation": "usp_upsert_project_table"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-14T13:06:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module7_JSON_To_AzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from Blob to Azure SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.online_purchase;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DLOnline",
								"type": "DatasetReference",
								"parameters": {
									"folder": "raw/online"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "online_purchase",
									"schemaname": "stg"
								}
							}
						]
					},
					{
						"name": "SP spPopulateOnline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data from Blob to Azure SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnline]",
							"storedProcedureParameters": {
								"getdate": {
									"value": {
										"value": "@variables('getdate')",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Move movies files into raw_online_archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP spPopulateOnline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_azurementoringdatalaketr",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DLOnline",
								"type": "DatasetReference",
								"parameters": {
									"folder": "raw/online"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DLOnline",
								"type": "DatasetReference",
								"parameters": {
									"folder": "raw/online/archive"
								}
							}
						]
					},
					{
						"name": "Delete from blob raw movies",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Move movies files into raw_online_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_DLOnline",
								"type": "DatasetReference",
								"parameters": {
									"folder": "raw/online/"
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_azurementoringdatalaketr",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"getdate": {
						"type": "String",
						"defaultValue": "@formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T16:12:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module7_blob_to_DL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT 1 FROM watermarktable where TableName  =  'online_table') \nselect WatermarkValue from watermarktable where TableName  =  'online_table'\nELSE\nselect cast( @{variables('LastLoadDate')} AS datetime) AS WatermarkValue ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "watermarktable",
									"schemaname": "dbo"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get Files Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue ",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@variables('NewLoadDate')",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Set variable FilesCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Files Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilesCount",
							"value": {
								"value": "@string(length(activity('Get Files Metadata').output.childItems))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Loading Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable FilesCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('FilesCount'), '0')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy_FromBlobToDL_Online",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "online//"
										},
										{
											"name": "Destination",
											"value": "raw/online/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"modifiedDatetimeStart": {
													"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
													"type": "Expression"
												},
												"modifiedDatetimeEnd": {
													"value": "@variables('NewLoadDate')",
													"type": "Expression"
												},
												"wildcardFileName": "*",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"skipErrorFile": {
											"fileMissing": true
										},
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_7o8",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_7o8",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "SP usp_write_watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If Loading Condition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"TableName": {
									"value": "online_table",
									"type": "String"
								},
								"LastModifiedtime": {
									"value": {
										"value": "@{variables('NewLoadDate')}",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LastLoadDate": {
						"type": "String",
						"defaultValue": "'1900-01-01'"
					},
					"NewLoadDate": {
						"type": "String",
						"defaultValue": "@formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')"
					},
					"FilesCount": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-22T15:37:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module8_woDtaFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM Copy OnlineService data from movie into aggr tbl",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGetDataForAggretatePurchase]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.AggretatePurchase;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ServiceId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ServiceId",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PurchaseQuantity",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PurchaseQuantity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PurchaseAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 10
										},
										"sink": {
											"name": "PurchaseAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "MonthKey",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MonthKey",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "Price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "AggretatePurchase",
									"schemaname": "dbo"
								}
							}
						]
					},
					{
						"name": "SP Populate Facts and DimOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DIM Copy OnlineService data from movie into aggr tbl",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM Copy Movies from movie to DM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateFactOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQL_DataMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DIM Copy Movies from movie to DM",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT m.MovieIdNK, m.Title, m.ReleaseDate, m.Runtime, ms.MovieStatusName AS MovieStatus, getutcdate() AS CreatedDate, getutcdate() AS ModifiedDate\nFROM dbo.tMovies m\nJOIN dbo.tMovieStatus ms ON m.MovieStatusId = ms.MovieStatusId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.DimMovie;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "DimMovie",
									"schemaname": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T16:03:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module8_woDtaFlow_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM Copy OnlineService data from movie into aggr tbl",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "   SELECT  os.ServiceCode, os.ServiceName, op.ServiceId, op.id,\n    op.Price , m.MovieIdNK, op.TransactionId, op.TransactionDate\n   FROM dbo.tOnlinePurchase op\n   LEFT JOIN dbo.tMovies m ON op.MovieId = m.MovieId\n   RIGHT JOIN dbo.tOnlineService os ON os.ServiceId = op.ServiceId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.AggretatePurchase;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ServiceId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ServiceId",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "Price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "TransactionDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "OnlinePurchase",
									"schemaname": "dbo"
								}
							}
						]
					},
					{
						"name": "SP Populate Facts and DimOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DIM Copy OnlineService data from movie into aggr tbl",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM Copy Movies from movie to DM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spNotAggrPopulateFactOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQL_DataMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DIM Copy Movies from movie to DM",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT m.MovieIdNK, m.Title, m.ReleaseDate, m.Runtime, ms.MovieStatusName AS MovieStatus, getutcdate() AS CreatedDate, getutcdate() AS ModifiedDate\nFROM dbo.tMovies m\nJOIN dbo.tMovieStatus ms ON m.MovieStatusId = ms.MovieStatusId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.DimMovie;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_moviesAzureSQLDBNoPrmt",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "DimMovie",
									"schemaname": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T23:05:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module9')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "metadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate stg tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSQL_stg_Module9",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "tControlMetadata",
									"SchemaName": "etl",
									"ConnectionString": "MoviesAzureSQLDBConnectionString"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach row of metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('metadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy from DL to stg",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												},
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "/*EXECUTE('TRUNCATE TABLE @{item().TrgSchemaName}' +'.'+ '@{item().TrgTableName}');*/",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().DIUValue",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().Mapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_dl_Module9",
											"type": "DatasetReference",
											"parameters": {
												"SecretKey": "scrMetadaDriven",
												"File": {
													"value": "@item().SrcFileName",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@item().SrcColumnDelimiter",
													"type": "Expression"
												},
												"EscapeCharacter": {
													"value": "@item().SrcEscapeCharacter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@item().SrcQuoteCharacter",
													"type": "Expression"
												},
												"Encoding": {
													"value": "@item().SrcEncoding",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@item().SrcContainer",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@item().SrcFolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AzureSQL_stg_Module9",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TrgTableName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().TrgSchemaName",
													"type": "Expression"
												},
												"ConnectionString": "MoviesAzureSQLDBConnectionString"
											}
										}
									]
								},
								{
									"name": "SP LoggingMetadata",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy from DL to stg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[LoggingMetadata]",
										"storedProcedureParameters": {
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityRunID": {
												"value": {
													"value": "@activity('Copy from DL to stg').ActivityRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"JSON": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartDateTime": {
												"value": {
													"value": "@activity('Copy from DL to stg').ExecutionStartTime",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											},
											"EndDateTime": {
												"value": {
													"value": "@activity('Copy from DL to stg').ExecutionEndTime",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzureSQLMtdDriven",
										"type": "LinkedServiceReference",
										"parameters": {
											"ConnectionString": "MoviesAzureSQLDBConnectionString"
										}
									}
								},
								{
									"name": "SP LoggingMetadataError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy from DL to stg",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[LoggingMetadataError]",
										"storedProcedureParameters": {
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityRunID": {
												"value": {
													"value": "@activity('Copy from DL to stg').ActivityRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityName": {
												"value": {
													"value": "@string('Copy from DL to stg')",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.errors[0].Message)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.errors[0].Code)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorType": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.errors[0].EventType)",
													"type": "Expression"
												},
												"type": "String"
											},
											"FailDateTime": {
												"value": {
													"value": "@activity('Copy from DL to stg').ExecutionEndTime",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzureSQLMtdDriven",
										"type": "LinkedServiceReference",
										"parameters": {
											"ConnectionString": "MoviesAzureSQLDBConnectionString"
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate stg tables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE stg.credits;\nTRUNCATE TABLE stg.ratings;\nTRUNCATE TABLE stg.movies_metadata;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T22:00:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMentoring_Module9_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "metadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate stg tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSQL_stg_Module9",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "tControlMetadata",
									"SchemaName": "etl",
									"ConnectionString": "MoviesAzureSQLDBConnectionString"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach row of metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('metadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy from DL to stg",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												},
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "/*EXECUTE('TRUNCATE TABLE @{item().TrgSchemaName}' +'.'+ '@{item().TrgTableName}');*/",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().DIUValue",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().Mapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_dl_Module9",
											"type": "DatasetReference",
											"parameters": {
												"SecretKey": "scrMetadaDriven",
												"File": {
													"value": "@item().SrcFileName",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@item().SrcColumnDelimiter",
													"type": "Expression"
												},
												"EscapeCharacter": {
													"value": "@item().SrcEscapeCharacter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@item().SrcQuoteCharacter",
													"type": "Expression"
												},
												"Encoding": {
													"value": "@item().SrcEncoding",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@item().SrcContainer",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@item().SrcFolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AzureSQL_stg_Module9",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TrgTableName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().TrgSchemaName",
													"type": "Expression"
												},
												"ConnectionString": "MoviesAzureSQLDBConnectionString"
											}
										}
									]
								},
								{
									"name": "SP LoggingMetadata",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy from DL to stg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[LoggingMetadata]",
										"storedProcedureParameters": {
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityRunID": {
												"value": {
													"value": "@activity('Copy from DL to stg').ActivityRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"JSON": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"MeterType": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.billingReference.billableDuration[0].metertype)",
													"type": "Expression"
												},
												"type": "String"
											},
											"duration": {
												"value": {
													"value": "@float(activity('Copy from DL to stg').output.billingReference.billableDuration[0].duration)",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"unit": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.billingReference.billableDuration[0].unit)",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzureSQLMtdDriven",
										"type": "LinkedServiceReference",
										"parameters": {
											"ConnectionString": "MoviesAzureSQLDBConnectionString"
										}
									}
								},
								{
									"name": "SP LoggingMetadataError",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy from DL to stg",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[LoggingMetadataError]",
										"storedProcedureParameters": {
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityRunID": {
												"value": {
													"value": "@activity('Copy from DL to stg').ActivityRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityName": {
												"value": {
													"value": "@string('Copy from DL to stg')",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.errors[0].Message)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.errors[0].Code)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorType": {
												"value": {
													"value": "@string(activity('Copy from DL to stg').output.errors[0].EventType)",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzureSQLMtdDriven",
										"type": "LinkedServiceReference",
										"parameters": {
											"ConnectionString": "MoviesAzureSQLDBConnectionString"
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate stg tables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE stg.credits;\nTRUNCATE TABLE stg.ratings;\nTRUNCATE TABLE stg.movies_metadata;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T21:42:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDataFromBlobIntoDLOnline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_7o8",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"metadata": [
										{
											"name": "LastModifiedDate",
											"value": "$$LASTMODIFIED"
										}
									]
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "IF EXISTS (SELECT 1 FROM watermarktable where TableName  =  'online_table') \nselect WatermarkValue from watermarktable where TableName  =  'online_table'\nELSE\nselect cast('1900-01-01' as datetime) AS WatermarkValue ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "watermarktable",
									"schemaname": "dbo"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set New MaterMark Date",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy_7o8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF NOT EXISTS (SELECT 1 FROM dbo.watermarktable WHERE TableName = 'online_table') \nINSERT INTO dbo.watermarktable VALUES ('online_table', '@{variables('LastLoadDate')}')\nELSE \nUPDATE dbo.watermarktable\nSET WatermarkValue = '@{variables('LastLoadDate')}'\nWHERE TableName = 'online_table'\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get NewWaterMark",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get NewWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get NewWaterMark').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SourceDataset_7o8_copy1",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "LastLoadDate",
										"value": {
											"value": "@activity('Get Metadata1').output.lastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LastLoadDate": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T15:24:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDataFromBlobIntoDLOnlineSimple')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF EXISTS (SELECT 1 FROM watermarktable where TableName  =  'online_table') \nselect WatermarkValue from watermarktable where TableName  =  'online_table'\nELSE\nselect cast( @{variables('LastLoadDate')} AS datetime) AS WatermarkValue ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "watermarktable",
									"schemaname": "dbo"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get Files Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue ",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@variables('NewLoadDate')",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Set variable FilesCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Files Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilesCount",
							"value": {
								"value": "@string(length(activity('Get Files Metadata').output.childItems))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Loading Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable FilesCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('FilesCount'), '0')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy_7o8",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "online//"
										},
										{
											"name": "Destination",
											"value": "raw/online/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"modifiedDatetimeStart": {
													"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
													"type": "Expression"
												},
												"wildcardFileName": "*",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"metadata": [
													{
														"name": "LastModifiedDate",
														"value": "$$LASTMODIFIED"
													}
												]
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"skipErrorFile": {
											"fileMissing": true
										},
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_7o8",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_7o8",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set New MaterMark Date",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy_7o8",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LS_MoviesAzureSqlDB",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "IF NOT EXISTS (SELECT 1 FROM dbo.watermarktable WHERE TableName = 'online_table') \nINSERT INTO dbo.watermarktable VALUES ('online_table', cast('@{variables('NewLoadDate')}' AS datetime))\nELSE \nUPDATE dbo.watermarktable\nSET WatermarkValue = cast( '@{variables('NewLoadDate')}' AS datetime)\nWHERE TableName = 'online_table'\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LastLoadDate": {
						"type": "String",
						"defaultValue": "'1900-01-01'"
					},
					"NewLoadDate": {
						"type": "String",
						"defaultValue": "@formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')"
					},
					"FilesCount": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T10:35:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDataFromBlobIntoDLOnline_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_7o8",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"metadata": [
										{
											"name": "LastModifiedDate",
											"value": "$$LASTMODIFIED"
										}
									]
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "IF EXISTS (SELECT 1 FROM watermarktable where TableName  =  'online_table') \nselect WatermarkValue from watermarktable where TableName  =  'online_table'\nELSE\nselect cast('1900-01-01' as datetime) AS WatermarkValue ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "watermarktable",
									"schemaname": "dbo"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set New MaterMark Date",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy_7o8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_MoviesAzureSqlDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF NOT EXISTS (SELECT 1 FROM dbo.watermarktable WHERE TableName = 'online_table') \nINSERT INTO dbo.watermarktable VALUES ('online_table', '@{variables('LastLoadDate')}')\nELSE \nUPDATE dbo.watermarktable\nSET WatermarkValue = '@{variables('LastLoadDate')}'\nWHERE TableName = 'online_table'\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get NewWaterMark",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset_7o8",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get NewWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get NewWaterMark').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SourceDataset_7o8_copy1",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata1').output.lastModified , activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue )",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastLoadDate",
													"value": {
														"value": "@activity('Get Metadata1').output.lastModified",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LastLoadDate": {
						"type": "String",
						"defaultValue": "'1900-01-01'"
					},
					"MaxLoadDate": {
						"type": "String",
						"defaultValue": "'1900-01-01'"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T15:24:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart_DimDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "SourcetMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "SourcetMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "SourcetOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "DimMovieSink"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServicesink"
						}
					],
					"transformations": [
						{
							"name": "joinMovies"
						},
						{
							"name": "DimMoviederivedColumns"
						},
						{
							"name": "DimOnlineServicederivedColumns"
						},
						{
							"name": "AlterDimMovie"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcetMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcetMovieStatus",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcetOnlineService",
						"SourcetMovies, SourcetMovieStatus join(SourcetMovies@MovieStatusId == SourcetMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovies",
						"joinMovies derive(CreatedDate = currentUTC('AEST'),",
						"          ModifiedDate = currentUTC('AEST')) ~> DimMoviederivedColumns",
						"SourcetOnlineService derive(CreatedDate = currentUTC('AEST'),",
						"          ModifiedDate = currentUTC('AEST')) ~> DimOnlineServicederivedColumns",
						"DimMoviederivedColumns alterRow(upsertIf(true())) ~> AlterDimMovie",
						"AlterDimMovie sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['MovieIdNK'],",
						"     format: 'table',",
						"     preSQLs:['/* TRUNCATE TABLE dbo.DimMovie ;\\nSET IDENTITY_INSERT dbo.DimMovie ON; */'],",
						"     postSQLs:['/* SET IDENTITY_INSERT dbo.DimMovie OFF; */'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimMovieSink",
						"DimOnlineServicederivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimOnlineServicesink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart_FactDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourcetOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourceDimOnlineService2"
						},
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourcetOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourcetMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourceDimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourceDimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sinkFactOnlinePurchaseMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"transformations": [
						{
							"name": "aggregatetOnlinePurchase"
						},
						{
							"name": "jointOnlinePurchaseDimOnlineService"
						},
						{
							"name": "joinOnlinePurchaseAggregate"
						},
						{
							"name": "jointMoviesDimMovies"
						},
						{
							"name": "joinMoviesOnlinePurchase"
						},
						{
							"name": "selectMoviesOnlinePurchase"
						},
						{
							"name": "joinOnlineServiceMoviesPurchase"
						},
						{
							"name": "joinFinall"
						},
						{
							"name": "derivedColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetOnlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimOnlineService2",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimMovie",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimOnlineService",
						"sourcetOnlinePurchase aggregate(groupBy(ServiceId,",
						"          MonthKey = substring(replace(toString(toDate(TransactionDate)),'-',''),1,6)),",
						"     PurchaseAmount = sum(toInteger(Price)),",
						"          PurchaseQuantity = count(toInteger(Id))) ~> aggregatetOnlinePurchase",
						"sourceDimOnlineService2, sourcetOnlineService join(sourceDimOnlineService2@ServiceCode == sourcetOnlineService@ServiceCode",
						"     && sourceDimOnlineService2@ServiceName == sourcetOnlineService@ServiceName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointOnlinePurchaseDimOnlineService",
						"jointOnlinePurchaseDimOnlineService, aggregatetOnlinePurchase join(sourcetOnlineService@ServiceId == aggregatetOnlinePurchase@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlinePurchaseAggregate",
						"sourceDimMovie, sourcetMovies join(sourceDimMovie@MovieIdNK == sourcetMovies@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointMoviesDimMovies",
						"jointMoviesDimMovies, sourcetOnlinePurchase join(sourcetMovies@MovieId == sourcetOnlinePurchase@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMoviesOnlinePurchase",
						"joinMoviesOnlinePurchase select(mapColumn(",
						"          MovieKey,",
						"          MovieIdNK = sourceDimMovie@MovieIdNK,",
						"          MovieId = sourcetMovies@MovieId,",
						"          ServiceId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMoviesOnlinePurchase",
						"sourcetOnlineService, selectMoviesOnlinePurchase join(sourcetOnlineService@ServiceId == selectMoviesOnlinePurchase@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineServiceMoviesPurchase",
						"joinOnlineServiceMoviesPurchase, sourceDimOnlineService join(sourcetOnlineService@ServiceCode == sourceDimOnlineService@ServiceCode",
						"     && sourcetOnlineService@ServiceName == sourceDimOnlineService@ServiceName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFinall",
						"joinFinall derive(TransactionDate = replace(toString(toDate(TransactionDate)), '-', '')) ~> derivedColumns",
						"joinOnlinePurchaseAggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> sinkFactOnlinePurchaseMonthlySnapshot",
						"derivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId,",
						"          DateKey = TransactionDate",
						"     )) ~> FactOnlinePurchase"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart_FactDataflow_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourcetOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourcetOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_moviesAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourcetMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourceDimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourceDimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sinkFactOnlinePurchaseMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DS_DataMartAzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"transformations": [
						{
							"name": "aggregatetOnlinePurchase"
						},
						{
							"name": "jointOnlinePurchaseDimOnlineService"
						},
						{
							"name": "joinOnlinePurchaseAggregate"
						},
						{
							"name": "jointMoviesDimMovies"
						},
						{
							"name": "joinMoviesOnlinePurchase"
						},
						{
							"name": "joinOnlineServiceMoviesPurchase"
						},
						{
							"name": "joinFinall"
						},
						{
							"name": "derivedColumns"
						},
						{
							"name": "FinalSelect"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimMovie",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimOnlineService",
						"sourcetOnlinePurchase aggregate(groupBy(ServiceId,",
						"          MonthKey = substring(replace(toString(toDate(TransactionDate)),'-',''),1,6)),",
						"     PurchaseAmount = sum(toInteger(Price)),",
						"          PurchaseQuantity = count(toInteger(Id))) ~> aggregatetOnlinePurchase",
						"sourceDimOnlineService, sourcetOnlineService join(sourceDimOnlineService@ServiceCode == sourcetOnlineService@ServiceCode",
						"     && sourceDimOnlineService@ServiceName == sourcetOnlineService@ServiceName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointOnlinePurchaseDimOnlineService",
						"jointOnlinePurchaseDimOnlineService, aggregatetOnlinePurchase join(sourcetOnlineService@ServiceId == aggregatetOnlinePurchase@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlinePurchaseAggregate",
						"sourcetOnlinePurchase, sourcetMovies join(sourcetOnlinePurchase@MovieId == sourcetMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointMoviesDimMovies",
						"jointMoviesDimMovies, sourceDimMovie join(sourcetMovies@MovieIdNK == sourceDimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMoviesOnlinePurchase",
						"sourcetOnlineService, joinMoviesOnlinePurchase join(sourcetOnlineService@ServiceId == sourcetOnlinePurchase@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineServiceMoviesPurchase",
						"joinOnlineServiceMoviesPurchase, sourceDimOnlineService join(sourcetOnlineService@ServiceCode == sourceDimOnlineService@ServiceCode",
						"     && sourcetOnlineService@ServiceName == sourceDimOnlineService@ServiceName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFinall",
						"FinalSelect derive(TransactionDate = replace(toString(toDate(TransactionDate)), '-', '')) ~> derivedColumns",
						"joinFinall select(mapColumn(",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"joinOnlinePurchaseAggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> sinkFactOnlinePurchaseMonthlySnapshot",
						"derivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OnlineServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId,",
						"          DateKey = TransactionDate",
						"     )) ~> FactOnlinePurchase"
					]
				}
			},
			"dependsOn": []
		}
	]
}